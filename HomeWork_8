{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyP2aXgMysSD7QiHwGPXpLnS",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/DDD86/Home_Work-Python-/blob/main/HomeWork_8\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt"
      ],
      "metadata": {
        "id": "RWhzroNvOxbp"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "88R4NMtOPl7U",
        "outputId": "ccdb2de9-3738-473d-a778-660b8fa6dd9f"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   USER_ID VARIANT_NAME  REVENUE\n",
              "0      737      variant      0.0\n",
              "1     2423      control      0.0\n",
              "2     9411      control      0.0\n",
              "3     7311      control      0.0\n",
              "4     6174      variant      0.0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-993feff4-94b3-4811-a9f7-498be2cdb90a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>USER_ID</th>\n",
              "      <th>VARIANT_NAME</th>\n",
              "      <th>REVENUE</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>737</td>\n",
              "      <td>variant</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2423</td>\n",
              "      <td>control</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>9411</td>\n",
              "      <td>control</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>7311</td>\n",
              "      <td>control</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>6174</td>\n",
              "      <td>variant</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-993feff4-94b3-4811-a9f7-498be2cdb90a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-993feff4-94b3-4811-a9f7-498be2cdb90a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-993feff4-94b3-4811-a9f7-498be2cdb90a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ea5a8643-222e-48cf-af48-c3488a96ab76\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ea5a8643-222e-48cf-af48-c3488a96ab76')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ea5a8643-222e-48cf-af48-c3488a96ab76 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 10000,\n  \"fields\": [\n    {\n      \"column\": \"USER_ID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2890,\n        \"min\": 2,\n        \"max\": 10000,\n        \"num_unique_values\": 6324,\n        \"samples\": [\n          2159,\n          5040,\n          418\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"VARIANT_NAME\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"control\",\n          \"variant\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"REVENUE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.3185286544925803,\n        \"min\": 0.0,\n        \"max\": 196.01,\n        \"num_unique_values\": 101,\n        \"samples\": [\n          1.3,\n          3.97\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "DylOYcNQPytB",
        "outputId": "b8969330-a67e-4fa5-f048-75cb32fd1465"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            USER_ID       REVENUE\n",
              "count  10000.000000  10000.000000\n",
              "mean    4981.080200      0.099447\n",
              "std     2890.590115      2.318529\n",
              "min        2.000000      0.000000\n",
              "25%     2468.750000      0.000000\n",
              "50%     4962.000000      0.000000\n",
              "75%     7511.500000      0.000000\n",
              "max    10000.000000    196.010000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7e07c6c2-4c39-4ede-ab45-4039477d7335\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>USER_ID</th>\n",
              "      <th>REVENUE</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>10000.000000</td>\n",
              "      <td>10000.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>4981.080200</td>\n",
              "      <td>0.099447</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>2890.590115</td>\n",
              "      <td>2.318529</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>2468.750000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>4962.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>7511.500000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>10000.000000</td>\n",
              "      <td>196.010000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7e07c6c2-4c39-4ede-ab45-4039477d7335')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7e07c6c2-4c39-4ede-ab45-4039477d7335 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7e07c6c2-4c39-4ede-ab45-4039477d7335');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9562ef8f-5054-4ac8-837f-83ee12de545a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9562ef8f-5054-4ac8-837f-83ee12de545a')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9562ef8f-5054-4ac8-837f-83ee12de545a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"USER_ID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3608.6225890702176,\n        \"min\": 2.0,\n        \"max\": 10000.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          10000.0,\n          4981.0802,\n          4962.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"REVENUE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3526.1762709917775,\n        \"min\": 0.0,\n        \"max\": 10000.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.09944700000000001,\n          196.01,\n          2.3185286544925803\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "control_users = df[df['VARIANT_NAME'] == 'control']['USER_ID'].nunique()\n",
        "variant_users = df[df['VARIANT_NAME'] == 'variant']['USER_ID'].nunique()\n",
        "print(\"Количество пользователей в группе Control:\", control_users)\n",
        "print(\"Количество пользователей в группе Variant:\", variant_users)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "W5C3LMDRP009",
        "outputId": "bf3b6fad-41b3-4ca9-a514-84c1cd921d42"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Количество пользователей в группе Control: 3931\n",
            "Количество пользователей в группе Variant: 3934\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "control_revenue = df[df['VARIANT_NAME'] == 'control']['REVENUE'].sum()\n",
        "variant_revenue = df[df['VARIANT_NAME'] == 'variant']['REVENUE'].sum()\n",
        "print(\"Общий доход в группе Control:\", control_revenue)\n",
        "print(\"Общий доход в группе Variant:\", variant_revenue)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FU_wayeNQM1Y",
        "outputId": "b03d2e37-c4f2-41f2-eede-7795ad864e26"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Общий доход в группе Control: 643.0\n",
            "Общий доход в группе Variant: 351.47\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "mean_control_revenue = control_revenue / control_users\n",
        "mean_variant_revenue = variant_revenue / variant_users\n",
        "print(\"Средний доход на пользователя в группе Control:\", mean_control_revenue)\n",
        "print(\"Средний доход на пользователя в группе Variant:\", mean_variant_revenue)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yic9g4LzQP-T",
        "outputId": "c50bc36c-f775-469c-93ff-dbbd0c11297f"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Средний доход на пользователя в группе Control: 0.16357161027728315\n",
            "Средний доход на пользователя в группе Variant: 0.08934163701067617\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "percent_control_revenue = (df[df['VARIANT_NAME'] == 'control']['REVENUE'] > 0).mean() * 100\n",
        "percent_variant_revenue = (df[df['VARIANT_NAME'] == 'variant']['REVENUE'] > 0).mean() * 100\n",
        "print(\"Процент пользователей, принесших доход в группе Control:\", percent_control_revenue, \"%\")\n",
        "print(\"Процент пользователей, принесших доход в группе Variant:\", percent_variant_revenue, \"%\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5tbUUv2DQSkn",
        "outputId": "dde8c1eb-6964-42ec-d5da-af1029accdc8"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Процент пользователей, принесших доход в группе Control: 1.6051364365971106 %\n",
            "Процент пользователей, принесших доход в группе Variant: 1.4354066985645932 %\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(10, 6))\n",
        "df.groupby('VARIANT_NAME')['REVENUE'].sum().plot(kind='bar', color=['blue', 'orange'])\n",
        "plt.title('Общий доход по группам')\n",
        "plt.xlabel('Группа')\n",
        "plt.ylabel('Общий доход')\n",
        "plt.xticks(rotation=0)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "CyMgg9z2QppT",
        "outputId": "3fb2cc86-110c-4389-a7e7-be886e8f1791"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "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Wd26dbvizwQACgq39gGAC50+fVqSVKZMmcuOu9hvt9sdbQ0bNlTTpk0d676+vurfv79SUlL0ww8/FEC1f15VqFevnjp37nzZcb///rvGjh2rAQMGqHLlyvne/8WrBSVLlrzsuK+//lq33Xab7rjjDkebn5+f+vXrp+TkZO3Zs8fR3rJlSz322GMaO3asOnTooJIlS+qdd9656v2Z1PlPHDt2TNu2bVPv3r0VFBTkaK9du7b+9a9/6euvv3bZseLj453WBw4cKEmOYwQEBKhdu3b66KOPZP3/R6Wzs7P1ySefqH379ipdurTLasmLj4+PPDw8HMc9deqU/Pz8VL169Tx/19u2bSubzaZFixZJkr799lv9+uuvevDBBwu0TgC4HIIUALjQxYB0MVBdSl6Bq0aNGrnGRUVFSVKu54lc4bvvvtOXX36pf//737mepfq7N998U+fOndOzzz5rdIyTJ09K+vMf7pfzyy+/5Lo9Tfrf+f/yyy9O7W+88YaCgoK0bds2TZ48WcHBwf9ofydPnpSXl5dKlSp1hTO6ehePeam6Tp48qbNnz7rkWNWqVXNav+mmm+Th4eH0e9SzZ08dOnRI3377raQ/bztMTU1Vjx49XFLD5eTk5GjChAmqVq2afHx8VL58eVWoUEE7duxQRkZGrvFeXl566KGH9N5770mS3nvvPXXs2FH+/v4FXisAXApBCgBcKCAgQBUrVtSOHTsuO27Hjh264YYbHP8Q9PX1vRblORkxYoTi4uLUvHnzy447efKkXn/9dY0YMcLpSkp+XPyHe34np8ivH3/8UcePH5ck7dy58x/vLzk5WZUrV75ioCyq8jqvuLg4hYSE6MMPP5QkffjhhwoNDVVsbGyB1/Pqq69q6NChuuuuu/Thhx9q6dKlWr58uW655Rbl5OTkuc0jjzyiZcuWaf/+/Zo3b54efvjhAq8TAC6HIAUALtamTRslJSU5ZlL7u2+//VbJyclq06aNo61KlSrav39/rrH79u2T5PogsnDhQiUmJuq111674tiXX35ZZcqU0ZNPPml8nC1btqhEiRKqW7fuZcdFRERc9vwjIiIcbWfPntXDDz+s6Oho9evXT+PHj9fmzZuven8XLlzQ9u3b1aBBg3yf19W4eMxL1VW+fHmX3VL3888/O63/97//VU5OjtPvkaenp7p166b58+frt99+08KF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1asdbWlpaVqyZIm6d++uM2fO6N5779XKlSv1448/6p577lHbtm116NAhp/288cYbqlOnjn788UeNGjUq13FycnJUqVIlzZs3T3v27NHo0aP17LPP6tNPP3Uad7XfK0CRZwEoMux2u+Xj42O9++67ufpmzJhhlS1b1jpz5oyj7auvvrI8PDyslJQUy7Isq1evXlZERIR14cIFx5jOnTtbDz74oGM9IiLCmjBhgtO+Z82aZUmytm3b5mj76aefLEnW+vXrHW0nT560fH19rU8//dSxXUBAwD86ZwBAbu3atbMeeeQRx/o777xjhYWFWdnZ2XmOv+WWW6y33nrLsR4REWG1b9/eaUxSUpIlyfrxxx8vedz4+HirY8eOjvWr/V4BrgdckQKKkL179yozM1MtWrTIs69OnToqXbq0o61JkybKycnR/v37HW233HKLPD09HesVK1bU8ePHr3hsb29v1a5d2+l4JUqUUKNGjRxt5cqVU/Xq1bV3717jcwMA5F/37t312WefKTMzU5I0Z84cdenSRR4eHjpz5oyGDRumqKgoBQYGys/PT3v37s11RapBgwZXPM7bb7+t+vXrq0KFCvLz89OMGTNy7edqv1eAoo4gBRQhvr6+/3gfXl5eTus2my1fE0f4+vpybzsAFBJt27aVZVn66quvdPjwYX377bfq3r27JGnYsGFasGCBXn31VX377bfatm2batWqpaysLKd9/PV/vOXl448/1rBhw9SnTx8tW7ZM27Zt08MPP5xrP1f7vQIUdQQpoAipVq2afH19tXLlylx9UVFR2r59u86ePetoW79+vTw8PFS9evV8H8Pb21vZ2dlXHBcVFaULFy5o48aNjrZTp05p//79io6OzvfxAADmSpYsqQ4dOmjOnDn66KOPVL16ddWrV0/Sn5/9vXv31v33369atWopNDRUycnJxsdYv369br/9dvXv31+33nqrqlatqgMHDhjvJ7/fK0BRQ5ACipCSJUtqxIgRevrpp/X+++/rwIED2rBhg2bOnKnu3burZMmS6tWrl3bt2qXVq1dr4MCB6tGjh0JCQvJ9jMjISK1bt05HjhzRyZMnLzmuWrVqateunfr27avvvvtO27dv10MPPaQbbrhB7dq1c8XpAgAuo3v37vrqq6/03nvvOa5GSX9+Pn/++efatm2btm/frm7dul3VFaJq1appy5YtWrp0qX766SeNGjVKmzdvNt5Pfr9XgKKGIAUUMaNGjdJTTz2l0aNHKyoqSg8++KCOHz+uUqVKaenSpUpLS1PDhg3VqVMntWjRQlOmTDHa/9ixY5WcnKybbrpJFSpUuOzYWbNmqX79+mrTpo1iYmJkWZa+/vrrXLd5AABcr3nz5goKCtL+/fvVrVs3R/ubb76psmXL6vbbb1fbtm0VFxfnuFpl4rHHHlOHDh304IMPqlGjRjp16pT69+9vvB+T7xWgKLFZlmW5uwgAAAAAKEq4IgUAAAAAhghSAAAAAGCIIAUAAAAAhghSAAAAAGCIIAUAAAAAhghSAAAAAGCIIAUAAAAAhghSAAAAAGCIIAUAAAAAhghSAIAioXfv3rLZbLmWRx991N2lAQCKoRLuLgAAgPy65557NGvWLKe2UqVKuakaAEBxxhUpAECR4ePjo9DQUKfF399fCQkJCgwM1MKFC1WtWjWVLFlScXFxOnz4sCQpOTlZHh4e2rJli9P+Jk6cqIiICOXk5GjNmjV5XvGy2WxauHChYz+XGjNx4kTHft98803VqlVLpUuXVnh4uPr3768zZ85cqx8TAOAaIEgBAK4Lv//+u1555RW9//77Wr9+vdLT09WlSxdJUmRkpGJjY3NdzZo1a5Z69+4tD4//fR3u379fx44dcyx5WbFihdOYSpUqOfV7eHho8uTJ2r17t2bPnq1Vq1bp6aefdvEZAwDciVv7AADXhfPnz2vKlClq1KiRJGn27NmKiorSpk2bdNttt+nRRx/V448/rjfffFM+Pj764YcftHPnTn3xxRdO+wkODlZgYOBlj1WuXDmFhoY61j09PZ36Bw8e7PhzZGSkXn75ZT3++OOaOnXqPztJAEChwRUpAMB1oUSJEmrYsKFjvUaNGgoMDNTevXslSe3bt5enp6cWLFggSUpISNDdd9+tyMhIl9eyYsUKtWjRQjfccIPKlCmjHj166NSpU/r9999dfiwAgHsQpAAAxYK3t7d69uypWbNmKSsrS3PnztUjjzzi8uMkJyerTZs2ql27tj777DNt3bpVb7/9tiQpKyvL5ccDALgHt/YBAK4LFy5c0JYtW3TbbbdJ+vNZp/T0dEVFRTnGPProo6pZs6amTp2qCxcuqEOHDi6vY+vWrcrJydF//vMfx7NXn376qcuPAwBwL65IAQCuC15eXho4cKA2btyorVu3qnfv3mrcuLEjWElSVFSUGjdurBEjRqhr167y9fV1eR1Vq1bV+fPn9dZbb+ngwYP64IMPNH36dJcfBwDgXgQpAMB1oVSpUhoxYoS6deumJk2ayM/PT5988kmucX369FFWVlaB3NYnSXXq1NGbb76pf//736pZs6bmzJmjcePGFcixAADuY7Msy3J3EQAA/BMJCQkaPHiw0tPTrzj2pZde0rx587Rjx46CLwwAcN3iihQAoFg4c+aMdu3apSlTpmjgwIHuLgcAUMQRpAAAxcKAAQNUv359NWvWrMBu6wMAFB/c2gcAAAAAhrgiBQAAAACGCFIAAAAAYIggBQAAAACGCFIAAAAAYIggBQAAAACGCFIAAAAAYIggBQAAAACGCFIAAAAAYOj/AQPptSCOSFZZAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(10, 6))\n",
        "df.groupby(['USER_ID', 'VARIANT_NAME'])['REVENUE'].sum().unstack().plot(kind='hist', stacked=True, bins=20, alpha=0.5)\n",
        "plt.title('Гистограмма дохода на пользователя по группам')\n",
        "plt.xlabel('Доход на пользователя')\n",
        "plt.ylabel('Частота')\n",
        "plt.legend(title='Группа')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 489
        },
        "id": "1B_bnTkuQv8j",
        "outputId": "0b92ad7e-9013-485a-b1c2-967d0e32ae2b"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Результаты эксперимента показывают, что группа \"Control\" превосходит группу \"Variant\" по общему доходу, среднему доходу на пользователя и проценту пользователей, принесших доход. Это может указывать на то, что текущий вариант, используемый в группе \"Variant\", менее эффективен для генерации дохода.\n",
        "\n",
        "**Рекомендации:**\n",
        "\n",
        "1.Исследовать причины низкого дохода в группе \"Variant\": Проведите\n",
        "анализ элементов и функциональности варианта \"Variant\", чтобы выявить причины его менее эффективного представления. Это позволит определить, какие аспекты необходимо улучшить или изменить для повышения дохода.\n",
        "2.Рассмотреть создание нового варианта: Разработайте новый вариант, который объединит наиболее эффективные элементы из обеих групп. Это может помочь создать более успешный вариант, способный превзойти как \"Control\", так и \"Variant\".\n",
        "3.Продолжать эксперименты: Продолжайте сбор данных и проведение экспериментов, чтобы получить более полное понимание о причинах различий между группами и определить оптимальные стратегии для увеличения дохода."
      ],
      "metadata": {
        "id": "znhge6FERDCp"
      }
    }
  ]
}